<?php

namespace App\Listeners;

use App\Events\UserNoticeEvent;
use App\Jobs\Mails\UserEmailJob;
use App\Models\UserManagement\UserNoticeReceiver;
use App\User;
use Illuminate\Foundation\Bus\DispatchesJobs;
use Illuminate\Queue\InteractsWithQueue;
use Illuminate\Contracts\Queue\ShouldQueue;
use Illuminate\Support\Facades\Log;

class UserNoticeListener implements ShouldQueue
{
    use DispatchesJobs;

    public function onNoticeCreated($item){
        Log::info('User Notice: New notice submitted:'. $item);
        //$this->dispatch((new UserEmailJob($user, $user, 'new.user'))->onQueue('emails'));
        $users = User::whereDoesntHave('notices', function($q) use ($item){
            $q->where('user_notice_id', '=', $item->id);
        })->paginate(1000);

        $user_notice_receiver_failed = false;

        foreach ($users->items() as $user) {
            if(UserNoticeReceiver::create([
                'user_notice_id' => $item->id,
                'user_id' => $user->id,
            ])) event('notice.sent', [$item, $user]);
            else $user_notice_receiver_failed = true;
        }

        if($users->currentPage() < $users->lastPage() || $user_notice_receiver_failed){
            event('notice.created', $item);
        }
    }

    public function onNoticeSent($item, $user){
        $this->dispatch((new UserEmailJob($user, $user, 'notice.alert'))->onQueue('emails')->delay(5));
    }

    public function subscribe($events)
    {
        $events->listen(
            'notice.created',
            'App\Listeners\UserNoticeListener@onNoticeCreated'
        );

        $events->listen(
            'notice.sent',
            'App\Listeners\UserNoticeListener@onNoticeSent'
        );
    }
}
