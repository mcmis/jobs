<?php

namespace App\Listeners;

use App\Events\UserEvent;
use App\Jobs\Mails\UserEmailJob;
use Illuminate\Foundation\Bus\DispatchesJobs;
use Illuminate\Queue\InteractsWithQueue;
use Illuminate\Contracts\Queue\ShouldQueue;
use Illuminate\Support\Facades\Log;

class UserListener implements ShouldQueue
{
    use DispatchesJobs;

    public function onRegistered($user){
        Log::info('Email: New user registered:'. $user);
        $this->dispatch((new UserEmailJob($user, $user, 'new.user'))->onQueue('emails'));
    }

    public function onProfileUpdate($user){
        Log::info('Email: User changed profile:'. $user);
        $this->dispatch((new UserEmailJob($user, $user, 'profile.changed'))->onQueue('emails'));
    }

    public function onPasswordChanged($user){
        Log::info('Email: User password changed:'. $user);
        $this->dispatch((new UserEmailJob($user, $user, 'password.changed'))->onQueue('emails'));
    }

    public function onDeactivated($user){
        Log::info('Email: User deactivate:'. $user);
    }

    public function onActivated($user){
        Log::info('Email: User activated:'. $user);
    }

    /**
     * Handle the event.
     *
     * @param  UserEvent  $event
     * @return void
     */
    public function subscribe($events)
    {
        $events->listen(
            'user.registered',
            'App\Listeners\UserListener@onRegistered'
        );

        $events->listen(
            'user.profile.updated',
            'App\Listeners\UserListener@onProfileUpdate'
        );

        $events->listen(
            'user.password.changed',
            'App\Listeners\UserListener@onPasswordChanged'
        );

        $events->listen(
            'user.deactivated',
            'App\Listeners\UserListener@onDeactivated'
        );

        $events->listen(
            'user.activated',
            'App\Listeners\UserListener@onActivated'
        );
    }
}
